Here is my part for making flappy.
Please add into global variables:


float bird_y0;


      2. Please add to the first line of void update() before if statements


bird_y0 = bird_y;


      3. Please replace void DrawEllipse, void DrawCircle, and void displayCallBack with the rest of the code


void DrawEllipse(float cx, float cy, float rx, float ry, int num_segments)
{
float theta = 2 * 3.1415926 / float(num_segments);
float c = cos(theta);//precalculate the sine and cosine
float s = sin(theta);
float t;

float x = 10;//we start at angle = 0 
float y = 0;

glBegin(GL_POLYGON);
for (int ii = 0; ii < num_segments + 3; ii++)
{
if (ii == 12)
{
glEnd();

glColor3ub(249, 194, 44);
glBegin(GL_POLYGON);
glVertex2f(x * rx + cx, y * ry + cy);
}
else if (ii == 11)
{
//apply radius and offset
glVertex2f(x * rx + cx, y * ry + cy);//output vertex 
}
else
{
//apply radius and offset
glVertex2f(x * rx + cx, y * ry + cy);//output vertex 

//apply the rotation matrix
t = x;
x = c * x - s * y;
y = s * t + c * y;
}
}
glEnd();
}

void DrawBorder(float cx, float cy, float rx, float ry, int num_segments)
{
float theta = 2 * 3.1415926 / float(num_segments);
float c = cos(theta);//precalculate the sine and cosine
float s = sin(theta);
float t;

float x = 10;//we start at angle = 0 
float y = 0;

glBegin(GL_LINE_STRIP);
for (int ii = 0; ii < num_segments; ii++)
{
//apply radius and offset
glVertex2f(x * rx + cx, y * ry + cy);//output vertex 

//apply the rotation matrix
t = x;
x = c * x - s * y;
y = s * t + c * y;
}
glEnd();
}

void DrawEye(float r, int num_segments) {
float theta = 2 * 3.1415926 / float(num_segments);
glBegin(GL_POLYGON);
for (int ii = 0; ii < num_segments; ii++) {
float xi = r * cos((theta * ii)) + 15.0f;
float yi = r * sin((theta * ii)) + 5.0f;
glVertex2f(xi, yi);
}
glEnd();
}

void DrawPupil()
{
glBegin(GL_QUADS);
glVertex2f(22, 12);
glVertex2f(22, 4);
glVertex2f(18, 4);
glVertex2f(18, 12);
glEnd();
}

void DrawLips()
{
glColor3f(0, 0, 0);
glBegin(GL_QUADS);
glVertex2f(9, -3);
glVertex2f(9, 0);
glVertex2f(33, 0);
glVertex2f(33, -3);
glEnd();

glColor3ub(253, 104, 75);
glBegin(GL_QUADS);
glVertex2f(9, -3);
glVertex2f(9, -6);
glVertex2f(33, -6);
glVertex2f(33, -3);
glEnd();

glColor3f(0, 0, 0);
glBegin(GL_QUADS);
glVertex2f(9, -6);
glVertex2f(9, -9);
glVertex2f(33, -9);
glVertex2f(33, -6);
glEnd();

glColor3f(0, 0, 0);
glBegin(GL_QUADS);
glVertex2f(9, -3);
glVertex2f(9, -12);
glVertex2f(6, -12);
glVertex2f(6, -3);
glEnd();

glColor3ub(253, 104, 75);
glBegin(GL_QUADS);
glVertex2f(9, -6);
glVertex2f(9, -9);
glVertex2f(6, -9);
glVertex2f(6, -6);
glEnd();

glColor3f(0, 0, 0);
glBegin(GL_QUADS);
glVertex2f(3, -6);
glVertex2f(3, -9);
glVertex2f(6, -9);
glVertex2f(6, -6);
glEnd();

glColor3ub(253, 104, 75);
glBegin(GL_QUADS);
glVertex2f(9, -12);
glVertex2f(9, -9);
glVertex2f(30, -9);
glVertex2f(30, -12);
glEnd();

glColor3f(0, 0, 0);
glBegin(GL_QUADS);
glVertex2f(9, -12);
glVertex2f(9, -15);
glVertex2f(30, -15);
glVertex2f(30, -12);
glEnd();
}

void DrawWing(float cx, float cy, float rx, float ry, int num_segments)
{
float theta = 2 * 3.1415926 / float(num_segments);
float c = cos(theta);//precalculate the sine and cosine
float s = sin(theta);
float t;

float x = 10;//we start at angle = 0 
float y = 0;

glBegin(GL_POLYGON);
for (int ii = 0; ii < num_segments + 3; ii++)
{
//apply radius and offset
glVertex2f(x * rx + cx, y * ry + cy);//output vertex 

//apply the rotation matrix
t = x;
x = c * x - s * y;
y = s * t + c * y;
}
glEnd();
//glRotatef(-30, 0, 0, 1);
}

//======================================================
// DISPLAY CALL BACK ROUTINE 
//======================================================
void displayCallBack(void)
{
printf("Display call back %d\n", display_count++);
cout << "pos of bird [" << bird_x << "," << bird_y << "]" << endl;

if (bird_x > w_width / 2) {
// Set Projection Mode and Volume
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
//glOrtho(0.0, w_width, 0.0, w_height, -1.0, 1.0);
glOrtho(bird_x - w_width / 2, bird_x + w_width / 2, 0.0, w_height, -1.0, 1.0);
}

glClearColor(0.0, 0.0, 0.0, 1.0);
glClear(GL_COLOR_BUFFER_BIT);

glMatrixMode(GL_MODELVIEW);
glLoadIdentity();

//draw bird
glPushMatrix();
glTranslatef(bird_x, bird_y, 0.0);
glRotatef(theta, 0, 0, 1.0);

glColor3ub(249, 241, 36);
DrawEllipse(3, 2, 2.5f, 2, 20);

glColor3f(0, 0, 0);
DrawBorder(3, 2, 2.5f, 2, 20);

glColor3f(1, 1, 1);
DrawEye(bird_r, 20);

glColor3f(0, 0, 0);
DrawPupil();

DrawLips();

if (bird_y - bird_y0 - 1 > 0.0f)
{
glRotatef(30, 0, 0, 1);
glTranslatef(1, 9, 0);
glColor3ub(250, 252, 233);
DrawWing(-15, -3, 1.2f, 1.f, 20);
}
else
{
glRotatef(-30, 0, 0, 1);
glColor3ub(250, 252, 233);
DrawWing(-15, -3, 1.2f, 1.f, 20);
}

glPopMatrix();

//draw obj
glPushMatrix();
glTranslatef(obj_x, obj_y, 0.0);
glColor3f(0, 1, 0);

glPopMatrix();

//Swap double buffers 
glutSwapBuffers();
}